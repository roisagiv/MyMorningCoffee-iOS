//
// My Morning Coffee
//
// Copyright Â© 2019 Roi Sagiv. All rights reserved.
// This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.
// To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/
//

import AcknowList
import MaterialComponents
import Reusable
import UIKit

class OpenSourceViewController: MDCCollectionViewController {
  /// The represented array of `Acknow`.
  open var acknowledgements: [Acknow]?

  /**
   Header text to be displayed above the list of the acknowledgements.
   It needs to get set before `viewDidLoad` gets called.
   Its value can be defined in the header of the plist file.
   */
  @IBInspectable open var headerText: String?

  /**
   Footer text to be displayed below the list of the acknowledgements.
   It needs to get set before `viewDidLoad` gets called.
   Its value can be defined in the header of the plist file.
   */
  @IBInspectable open var footerText: String?

  /**
   Acknowledgements plist file name whose contents to be loaded.
   It expects to get set by "User Defined Runtime Attributes" in Interface Builder.
   */
  @IBInspectable var acknowledgementsPlistName: String?

  private var appBar: MDCAppBarViewController?

  // MARK: - Initialization

  /**
   Initializes the `AcknowListViewController` instance based on default configuration.

   - returns: The new `AcknowListViewController` instance.
   */
  public convenience init() {
    let path = OpenSourceViewController.defaultAcknowledgementsPlistPath()
    self.init(acknowledgementsPlistPath: path)
  }

  /**
   Initializes the `AcknowListViewController` instance for the plist file based on its name.

   - returns: The new `AcknowListViewController` instance.
   */
  public convenience init(fileNamed fileName: String) {
    let path = OpenSourceViewController.acknowledgementsPlistPath(name: fileName)
    self.init(acknowledgementsPlistPath: path)
  }

  /**
   Initializes the `AcknowListViewController` instance for a plist file path.

   - parameter acknowledgementsPlistPath: The path to the acknowledgements plist file.

   - returns: The new `AcknowListViewController` instance.
   */
  public init(acknowledgementsPlistPath: String?) {
    super.init(collectionViewLayout: MDCCollectionViewFlowLayout())

    if let acknowledgementsPlistPath = acknowledgementsPlistPath {
      commonInit(acknowledgementsPlistPaths: [acknowledgementsPlistPath])
    } else {
      commonInit(acknowledgementsPlistPaths: [])
    }
  }

  /**
   Initializes the `AcknowListViewController` instance for a set of plist file paths.

   The first path is the "main" one which will be used for any custom header/footer.

   - parameter acknowledgementsPlistPaths: The paths to the acknowledgements plist files.

   - returns: The new `AcknowListViewController` instance.
   */
  public init(acknowledgementsPlistPaths: [String]) {
    super.init(collectionViewLayout: MDCCollectionViewFlowLayout())
    commonInit(acknowledgementsPlistPaths: acknowledgementsPlistPaths)
  }

  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
  }

  required init?(coder: NSCoder) {
    super.init(coder: coder)
    let path = OpenSourceViewController.defaultAcknowledgementsPlistPath()
    if let path = path {
      commonInit(acknowledgementsPlistPaths: [path])
    } else {
      commonInit(acknowledgementsPlistPaths: [])
    }
  }

  func commonInit(acknowledgementsPlistPaths: [String]) {
    title = AcknowLocalization.localizedTitle()

    guard !acknowledgementsPlistPaths.isEmpty else { return }

    /*
     if let mainPlistPath = acknowledgementsPlistPaths.first {
     let parser = AcknowParser(plistPath: mainPlistPath)
     let headerFooter = parser.parseHeaderAndFooter()

     let defaultHeaderText = "This application makes use of the following third party libraries:"
     let defaultFooterText = "Generated by CocoaPods - https://cocoapods.org"
     let defaultFooterTextLegacy = "Generated by CocoaPods - http://cocoapods.org"
     }
     */

    var acknowledgements: [Acknow] = []
    for path in acknowledgementsPlistPaths {
      let parser = AcknowParser(plistPath: path)
      acknowledgements.append(contentsOf: parser.parseAcknowledgements())
    }

    let sortedAcknowledgements = acknowledgements.sorted(by: { (ack1: Acknow, ack2: Acknow) -> Bool in
      let result = ack1.title.compare(
        ack2.title,
        options: [],
        range: nil,
        locale: Locale.current
      )
      return (result == ComparisonResult.orderedAscending)
    })
    self.acknowledgements = sortedAcknowledgements
  }

  // MARK: - Paths

  class func acknowledgementsPlistPath(name: String) -> String? {
    return Bundle.main.path(forResource: name, ofType: "plist")
  }

  class func defaultAcknowledgementsPlistPath() -> String? {
    guard let bundleName = Bundle.main.infoDictionary?["CFBundleName"] as? String else {
      return nil
    }

    let defaultAcknowledgementsPlistName = "Pods-\(bundleName)-acknowledgements"
    let defaultAcknowledgementsPlistPath = acknowledgementsPlistPath(name: defaultAcknowledgementsPlistName)

    if let defaultAcknowledgementsPlistPath = defaultAcknowledgementsPlistPath,
      FileManager.default.fileExists(atPath: defaultAcknowledgementsPlistPath) == true {
      return defaultAcknowledgementsPlistPath
    } else {
      // Legacy value
      return acknowledgementsPlistPath(name: "Pods-acknowledgements")
    }
  }

  /// Prepares the receiver for service after it has been loaded from an Interface Builder archive, or nib file.
  open override func awakeFromNib() {
    super.awakeFromNib()

    let path: String?
    if let acknowledgementsPlistName = self.acknowledgementsPlistName {
      path = OpenSourceViewController.acknowledgementsPlistPath(name: acknowledgementsPlistName)
    } else {
      path = OpenSourceViewController.defaultAcknowledgementsPlistPath()
    }

    if let path = path {
      commonInit(acknowledgementsPlistPaths: [path])
    }
  }

  /// Called after the controller's view is loaded into memory.
  open override func viewDidLoad() {
    super.viewDidLoad()

    Theme.apply(to: self)
    collectionView.register(cellType: OpenSourceItemCell.self)
    Theme.apply(to: collectionView)
    styler.cellStyle = .default
    styler.shouldHideSeparators = false

    if let navigationController = self.navigationController {
      if presentingViewController != nil,
        navigationController.viewControllers.first == self {
        let item = UIBarButtonItem(
          barButtonSystemItem: .done,
          target: self,
          action: #selector(OpenSourceViewController.dismissViewController(_:))
        )
        navigationItem.leftBarButtonItem = item
      }
    }
  }

  /**
   Dismisses the view controller.

   - parameter sender: The event sender.
   */
  @IBAction open func dismissViewController(_: AnyObject) {
    dismiss(animated: true, completion: nil)
  }

  override func collectionView(_: UICollectionView, numberOfItemsInSection _: Int) -> Int {
    if let acknowledgements = self.acknowledgements {
      return acknowledgements.count
    }

    return 0
  }

  override func collectionView(
    _ collectionView: UICollectionView,
    cellForItemAt indexPath: IndexPath
  ) -> UICollectionViewCell {
    let cell: OpenSourceItemCell = collectionView.dequeueReusableCell(for: indexPath)

    Theme.apply(to: cell)

    if let acknowledgements = self.acknowledgements,
      let acknowledgement = acknowledgements[(indexPath as NSIndexPath).row] as Acknow? {
      cell.textLabel?.text = acknowledgement.title
    }

    return cell
  }

  override func collectionView(_: UICollectionView, didSelectItemAt indexPath: IndexPath) {
    if let acknowledgements = self.acknowledgements,
      let acknowledgement = acknowledgements[(indexPath as NSIndexPath).row] as Acknow?,
      let navigationController = self.navigationController {
      let viewController = AcknowViewController(acknowledgement: acknowledgement)
      navigationController.pushViewController(viewController, animated: true)
      if let textView = viewController.textView {
        Theme.apply(.body2, to: textView)
      }
    }
  }

  class OpenSourceItemCell: MDCCollectionViewTextCell, Reusable {
    static let height: CGFloat = MDCCellDefaultOneLineHeight
  }
}
